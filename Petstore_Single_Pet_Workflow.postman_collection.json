{
  "info": {
    "_postman_id": "c1c2c3c4-d5d6-e7e8-f9f0-a1a2a3a4a5a6",
    "name": "Petstore API - Single Pet Workflow",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Single pet workflow: create pet, place order, delete order, delete pet, verify deletion. Run 4 times with Collection Runner."
  },
  "variable": [
    { "key": "baseUrl", "value": "https://petstore.swagger.io/v2" },
    { "key": "apiKey", "value": "special-key" }
  ],
  "item": [
    {
      "name": "1. Create Pet",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"id\": {{currentPetId}},\n  \"category\": {\n    \"id\": 1,\n    \"name\": \"Dogs\"\n  },\n  \"name\": \"TestPet{{currentPetId}}\",\n  \"photoUrls\": [\n    \"https://example.com/pet{{currentPetId}}.jpg\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 1,\n      \"name\": \"test\"\n    }\n  ],\n  \"status\": \"available\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/pet",
          "host": ["{{baseUrl}}"],
          "path": ["pet"]
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Generate unique IDs for each run",
              "const iteration = pm.info.iteration || 0;",
              "const petId = 10001 + iteration;",
              "const orderId = 20001 + iteration;",
              "pm.environment.set('currentPetId', petId);",
              "pm.environment.set('currentOrderId', orderId);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Pet created successfully\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              "",
              "if (pm.response.code === 200 || pm.response.code === 201) {",
              "    const responseJson = pm.response.json();",
              "    console.log('Pet created with ID:', responseJson.id);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "2. Place Order",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"id\": {{currentOrderId}},\n  \"petId\": {{currentPetId}},\n  \"quantity\": 1,\n  \"shipDate\": \"2025-08-03T08:10:22.870Z\",\n  \"status\": \"placed\",\n  \"complete\": true\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/store/order",
          "host": ["{{baseUrl}}"],
          "path": ["store", "order"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Order placed successfully\", function () {",
              "    pm.expect(pm.response.code).to.eql(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    const responseJson = pm.response.json();",
              "    console.log('Order placed with ID:', responseJson.id);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "3. Delete Order (with Retry)",
      "request": {
        "method": "DELETE",
        "header": [
          { "key": "api_key", "value": "{{apiKey}}" }
        ],
        "url": {
          "raw": "{{baseUrl}}/store/order/{{currentOrderId}}",
          "host": ["{{baseUrl}}"],
          "path": ["store", "order", "{{currentOrderId}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "let retryCount = pm.environment.get('orderDeleteRetries') || 0;",
              "",
              "if (pm.response.code === 200) {",
              "    pm.test(\"Order deleted successfully\", function () {",
              "        pm.expect(pm.response.code).to.eql(200);",
              "    });",
              "    pm.environment.unset('orderDeleteRetries');",
              "    console.log('Order deleted:', pm.environment.get('currentOrderId'));",
              "} else if (pm.response.code === 404 && retryCount < 3) {",
              "    pm.environment.set('orderDeleteRetries', retryCount + 1);",
              "    console.log('Order delete retry', retryCount + 1, 'for order:', pm.environment.get('currentOrderId'));",
              "    postman.setNextRequest(pm.info.requestName);",
              "} else {",
              "    pm.test(\"Order delete failed after retries\", function () {",
              "        pm.expect(pm.response.code).to.eql(200);",
              "    });",
              "    pm.environment.unset('orderDeleteRetries');",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "4. Delete Pet (with Retry)",
      "request": {
        "method": "DELETE",
        "header": [
          { "key": "api_key", "value": "{{apiKey}}" }
        ],
        "url": {
          "raw": "{{baseUrl}}/pet/{{currentPetId}}",
          "host": ["{{baseUrl}}"],
          "path": ["pet", "{{currentPetId}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "let retryCount = pm.environment.get('petDeleteRetries') || 0;",
              "",
              "if (pm.response.code === 200) {",
              "    pm.test(\"Pet deleted successfully\", function () {",
              "        pm.expect(pm.response.code).to.eql(200);",
              "    });",
              "    pm.environment.unset('petDeleteRetries');",
              "    console.log('Pet deleted:', pm.environment.get('currentPetId'));",
              "} else if (pm.response.code === 404 && retryCount < 3) {",
              "    pm.environment.set('petDeleteRetries', retryCount + 1);",
              "    console.log('Pet delete retry', retryCount + 1, 'for pet:', pm.environment.get('currentPetId'));",
              "    postman.setNextRequest(pm.info.requestName);",
              "} else {",
              "    pm.test(\"Pet delete failed after retries\", function () {",
              "        pm.expect(pm.response.code).to.eql(200);",
              "    });",
              "    pm.environment.unset('petDeleteRetries');",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "5. Verify Pet Deleted (404)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/pet/{{currentPetId}}",
          "host": ["{{baseUrl}}"],
          "path": ["pet", "{{currentPetId}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Pet not found after deletion (404)\", function () {",
              "    pm.expect(pm.response.code).to.eql(404);",
              "});",
              "",
              "console.log('Verified pet deletion - Pet ID:', pm.environment.get('currentPetId'));"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "6. Verify Order Deleted (404)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/store/order/{{currentOrderId}}",
          "host": ["{{baseUrl}}"],
          "path": ["store", "order", "{{currentOrderId}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Order not found after deletion (404)\", function () {",
              "    pm.expect(pm.response.code).to.eql(404);",
              "});",
              "",
              "console.log('Verified order deletion - Order ID:', pm.environment.get('currentOrderId'));"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}
